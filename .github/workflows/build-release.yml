name: Build & release (reusable workflow)

on:
  workflow_call:
    inputs:
      dist_files:
        description: "Newline-separated files to copy into dist/"
        type: string
        required: true
      setup_commands:
        description: "Optional pre-build commands (sanitized; no shell metacharacters)"
        type: string
        default: ""
      build_commands:
        description: "Build commands (sanitized)"
        type: string
        default: |
          npm ci
          npm run build
      node_version:
        description: "Node version"
        type: string
        default: "22"
      package_prefix:
        description: "Zip name prefix (defaults to repo name)"
        type: string
        default: ""
      release_branch:
        description: "Branch that triggers a release"
        type: string
        default: "main"
      calver_format:
        description: "date(1) format"
        type: string
        default: "+%Y%m%d-%H%M"
      allow_updates:
        description: "Update existing release if tag exists"
        type: boolean
        default: true
      artifact_retention_days:
        description: "Artifact retention days"
        type: string
        default: "7"
      working_directory:
        description: "Optional working directory (relative path)"
        type: string
        default: ""

permissions:
  contents: read

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ""  # shadow token in shell

    outputs:
      zip_name: ${{ steps.pkg.outputs.zip_name }}
      calver: ${{ steps.pkg.outputs.calver }}

    steps:
      - name: Guard supported events
        if: ${{ !(github.event_name == 'workflow_call' || github.event_name == 'workflow_dispatch' || github.event_name == 'push') }}
        run: |
          echo "Unsupported event: ${{ github.event_name }}"
          exit 1

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ github.token }}
          persist-credentials: false
          fetch-depth: 1

      - name: Sanitize inputs (workdir, prefix)
        id: sanitize
        shell: bash
        run: |
          set -euo pipefail
          wd='${{ inputs.working_directory }}'
          if [[ -n "$wd" ]]; then
            if [[ "$wd" == /* || "$wd" == *".."* || ! "$wd" =~ ^[A-Za-z0-9._/-]+$ ]]; then
              echo "Invalid working_directory: $wd" >&2; exit 1
            fi
            echo "WORKDIR=$wd" >> "$GITHUB_ENV"
          fi
          prefix='${{ inputs.package_prefix }}'
          prefix_sanitized="$(printf '%s' "$prefix" | tr -cd 'A-Za-z0-9._-')"
          echo "PKG_PREFIX=$prefix_sanitized" >> "$GITHUB_ENV"

      - name: Compute dependency path
        id: dep
        shell: bash
        run: |
          set -euo pipefail
          if [[ -n "${WORKDIR:-}" ]]; then
            echo "path=$WORKDIR/package-lock.json" >> "$GITHUB_OUTPUT"
          else
            echo "path=package-lock.json" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: npm
          cache-dependency-path: ${{ steps.dep.outputs.path }}

      - name: Optional setup (sanitized)
        if: ${{ inputs.setup_commands != '' }}
        shell: bash
        run: |
          set -euo pipefail
          echo '${{ inputs.setup_commands }}' > _setup.txt
          if grep -nE '[`$|&;<>]' _setup.txt; then
            echo "setup_commands contain disallowed metacharacters" >&2; exit 1
          fi
          while IFS= read -r line; do
            [[ -z "$line" ]] && continue
            if [[ -n "${WORKDIR:-}" ]]; then (cd "$WORKDIR" && $line); else $line; fi
          done < _setup.txt

      - name: Build (sanitized)
        if: ${{ inputs.build_commands != '' }}
        shell: bash
        run: |
          set -euo pipefail
          echo '${{ inputs.build_commands }}' > _build.txt
          if grep -nE '[`$|&;<>]' _build.txt; then
            echo "build_commands contain disallowed metacharacters" >&2; exit 1
          fi
          while IFS= read -r line; do
            [[ -z "$line" ]] && continue
            if [[ -n "${WORKDIR:-}" ]]; then (cd "$WORKDIR" && $line); else $line; fi
          done < _build.txt

      - name: Prepare dist
        shell: bash
        run: |
          set -euo pipefail
          [[ -n "${WORKDIR:-}" ]] && cd "$WORKDIR"
          rm -rf dist && mkdir -p dist
          while IFS= read -r f; do
            [[ -z "$f" ]] && continue
            case "$f" in
              /*|*../*|../* ) echo "Refusing path: $f" >&2; exit 1;;
            esac
            if [[ -f "$f" ]]; then
              cp -v -- "$f" dist/
            else
              echo "Skipping missing $f"
            fi
          done <<< '${{ inputs.dist_files }}'

      - name: Package (CalVer)
        id: pkg
        shell: bash
        run: |
          set -euo pipefail
          [[ -n "${WORKDIR:-}" ]] && cd "$WORKDIR"
          CALVER=$(date -u "${{ inputs.calver_format }}")
          echo "calver=$CALVER" >> "$GITHUB_OUTPUT"
          prefix="${PKG_PREFIX:-${GITHUB_REPOSITORY##*/}}"
          ZIP_NAME="${prefix}-${CALVER}.zip"
          mkdir -p package
          (cd dist && zip -r "../package/$ZIP_NAME" .)
          echo "zip_name=$ZIP_NAME" >> "$GITHUB_OUTPUT"

      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: ${{ inputs.working_directory != '' && format('{0}/dist', inputs.working_directory) || 'dist' }}
          retention-days: "${{ inputs.artifact_retention_days }}"

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.pkg.outputs.zip_name }}
          path: ${{ inputs.working_directory != '' && format('{0}/package/{1}', inputs.working_directory, steps.pkg.outputs.zip_name) || format('package/{0}', steps.pkg.outputs.zip_name) }}
          if-no-files-found: error
          retention-days: "${{ inputs.artifact_retention_days }}"

  release:
    needs: build
    if: >
      github.event_name == 'workflow_call' &&
      github.ref_type == 'branch' &&
      github.ref_name == inputs.release_branch
    
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download packaged artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.zip_name }}
          path: package

      - name: Publish GitHub Release (gh)
        env:
          GH_TOKEN: ${{ github.token }}
          TAG: ${{ needs.build.outputs.calver }}
          NAME: ${{ format('{0} {1}', (inputs.package_prefix != '' && inputs.package_prefix || github.event.repository.name), needs.build.outputs.calver) }}
          FILE: package/${{ needs.build.outputs.zip_name }}
          ALLOW_UPDATES: ${{ inputs.allow_updates }}
        run: |
          set -euo pipefail
          [[ -f "$FILE" ]] || { echo "Missing asset: $FILE"; exit 1; }

          if gh release view "$TAG" >/dev/null 2>&1; then
            [[ "$ALLOW_UPDATES" == "true" ]] || { echo "Release exists and updates disabled"; exit 1; }
            gh release edit "$TAG" --title "$NAME" >/dev/null
            gh release upload "$TAG" "$FILE" --clobber
          else
            gh release create "$TAG" "$FILE" --title "$NAME" --generate-notes
          fi
